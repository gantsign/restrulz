/*
 * Copyright 2016-2017 GantSign Ltd. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar com.gantsign.restrulz.Restdsl with org.eclipse.xtext.common.Terminals

generate restdsl "http://www.gantsign.com/restrulz/Restdsl"

Specification:
	(doc=SpecificationDoc)? 'specification' name=ID '{'
		simpleTypes+=SimpleType*
		classTypes+=ClassType*
		responses+=Response*
		pathScopes+=PathScope*
	'}';

SpecificationDoc:
	{SpecificationDoc} '@doc' '{'
		('title' ':' title=STRING)?
		('description' ':' description=STRING)?
		('version' ':' version=STRING)?
	'}'
;

terminal STRING	:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

SimpleType:
	StringType | IntegerType;

StringType:
	'type' name=ID ':' 'string' pattern = PATTERN 'length' '[' minLength=INT '..' maxLength=INT ']';

IntegerType:
	'type' name=ID ':' 'int' '[' minimum=INT '..' maximum=INT ']';

terminal ID : ('a'..'z'|'A'..'Z'|'$'|'-'|'_') ('a'..'z'|'A'..'Z'|'$'|'-'|'_'|'0'..'9')*;

terminal PATTERN : '^'('\\$' | !('\\$' | '$'))*'$';

ClassType:
	'class' name=ID '{'
		properties+=Property*
	'}';

Property:
	name=ID (':' (type=[Type]|fixedType=FixedType) (array?='[]' | ('|' (allowEmpty?='empty' | allowNull?='null')))?)?;

Type:
	SimpleType | ClassType;

FixedType:
	BooleanType;

BooleanType:
	'boolean';

PathScope:
	'path' path=Path ':' name=ID '{'
		mappings+=RequestMapping*
	'}';

Path hidden():
	{Path} '/' (elements+=PathElement ('/' elements+=PathElement)*)?;

PathElement:
	StaticPathElement | PathParam;

StaticPathElement:
	value=ID;

PathParam hidden(WS):
	'{' name=ID (':' type=[SimpleType])?'}';

RequestMapping:
	RequestHandler | SubPathScope;

RequestHandler:
	method=HttpMethod '->' name=ID
	'(' (parameters+=MethodParameter (',' parameters+=MethodParameter)*)? ')'
	':' responses+=ResponseRef ('|' responses+=ResponseRef)*;

SubPathScope:
	'path' path=Path '{'
		mappings+=RequestMapping*
	'}';

enum HttpMethod:
	GET = 'get' | PUT = 'put' | POST = 'post' | DELETE = 'delete';

MethodParameter:
	name=ID '=' value=(PathParamRef | BodyTypeRef);

PathParamRef hidden():
	'/' ref=[PathParam];

BodyTypeRef hidden():
	'*' ref=[ClassType];

ResponseRef:
	ref=[Response];

Response:
	'response' name=ID ':' detail=(ResponseWithBody | ResponseOptionalBody | ResponseWithoutBody);

ResponseWithBody:
	status=StatusRequiresBody body=[ClassType] (array?='[]')?;

ResponseWithoutBody:
	status=StatusForbiddenBody;

ResponseOptionalBody:
	status=StatusOptionalBody (body=[ClassType] (array?='[]')?)?;

enum StatusRequiresBody:
	HTTP_200 = 'ok' | HTTP_206 = 'partial-content' | HTTP_400 = 'bad-request' | HTTP_500 = 'internal-server-error';

enum StatusForbiddenBody:
	HTTP_204 = 'no-content'
	| HTTP_304 = 'not-modified';

enum StatusOptionalBody:
	HTTP_201 = 'created' | HTTP_202 = 'accepted'
	| HTTP_301 = 'moved-permanently' | HTTP_303 = 'see-other' | HTTP_307 = 'temporary-redirect' | HTTP_308 = 'permanent-redirect'
	| HTTP_401 = 'unauthorized' | HTTP_403 = 'forbidden' | HTTP_404 = 'not-found' | HTTP_406 = 'not-acceptable' | HTTP_409 = 'conflict'
	| HTTP_410 = 'gone' | HTTP_429 = 'too-many-requests'
	| HTTP_501 = 'not-implemented' | HTTP_502 = 'bad-gateway' | HTTP_503 = 'service-unavailable' | HTTP_504 = 'gateway-time-out';
